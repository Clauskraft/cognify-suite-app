# Stage 1: Build Environment (not strictly necessary for a single HTML file, but good practice for future expansion)
# We use a multi-stage build to keep the final image small and secure.
# This first stage could be used to build assets with Node.js, etc.
FROM nginx:1.25-alpine as builder

# For this simple static app, we don't have a build step,
# but we'll prepare the directory structure.
WORKDIR /app

# The final application code will be placed in a 'dist' directory.
# For now, we assume you have an 'index.html' file ready.
# In a real CI/CD pipeline, this file would be the output of a build process.
COPY index.html /app/dist/index.html


# Stage 2: Production Environment
# We use a slim, hardened Nginx image for serving the static content.
FROM nginx:1.25-alpine

# Cloud Run expects services to listen on port 8080.
# We'll create a custom Nginx configuration to handle this.
RUN echo "server { listen 8080; location / { root /usr/share/nginx/html; try_files \$uri /index.html; } }" > /etc/nginx/conf.d/default.conf

# Copy the static files from the builder stage into the Nginx web root.
# For this app, it's just the one file.
COPY --from=builder /app/dist /usr/share/nginx/html

# Expose the port Cloud Run will listen on.
EXPOSE 8080

# The command to start the Nginx server when the container starts.
CMD ["nginx", "-g", "daemon off;"]
